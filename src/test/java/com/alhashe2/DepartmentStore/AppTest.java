/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.alhashe2.DepartmentStore;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

class AppTest {
    /*
     * Tests if a new item has a UUID
     */
    @Test void test_itemHasUUID() {
        Item item = Item.ofName("peanuts");
        assertNotNull(item);
    }

    /*
     * Tests if a new item created by default has a quantity of 0
     */
    @Test void test_itemHasQuanityZero() {
        Item item = Item.ofName("peanuts");
        assertEquals(item.getProductQuantity(), 0);
    }

    /*
     * Tests if new item created has specifed quantity
     */
    @Test void test_itemHasSpecifiedQuantity() {
        int quantity = 27;
        Item item = Item.ofNameWithQuantity("almonds", quantity);
        assertEquals(quantity, item.getProductQuantity());
    }


    /*
     * Tests if the default HashMap is empty when 
     * creating an inventory
     */
    @Test void test_defaultInventoryIsEmpty() {
        Inventory inventory = Inventory.empty();
        assertEquals(inventory.getInventoryMap().size(), 0);
    }


    /*
     * Tests if the default quantity is zero
     */
    @Test void test_addItemWithName() {
        Inventory inventory = Inventory.empty();
        UUID id = inventory.addItem("walnuts");
        assertEquals(0, inventory.getInventoryMap().get(id).getProductQuantity());
    }

    /*
     * Tests if the correct quantity is recorded when creating an item
     * with specifed quantity.
     */
    @Test void  test_addItemWithNameAndQuantity() {
        int QUANTITY = 27;
        Inventory inventory = Inventory.empty();
        UUID id = inventory.addItem("walnuts", QUANTITY);
        assertEquals(QUANTITY, inventory.getInventoryMap().get(id).getProductQuantity());
    }

    /*
     * Tests if creating an Inventory with an array of items
     * the correct number of items is recorded.
     */
    @Test void test_createInventoryFromArrayOfItems() throws InventoryError {
        Item[] items = {
            Item.ofName("peanuts"),
            Item.ofNameWithQuantity("almonds", 12),
            Item.ofNameWithQuantityAndID("berries", 30, UUID.randomUUID())
        };

        Inventory inventory = Inventory.fromItems(items);
        assertEquals(inventory.getInventoryMap().size(), items.length);
    }

    @Test void test_createInventoryFromArrayOfItemNamesThrowsInventoryError() {
        UUID sameUUuid = UUID.randomUUID();
        Item[] items = {
            Item.ofNameWithQuantityAndID("almonds", 12, sameUUuid),
            Item.ofNameWithQuantityAndID("berries", 30, sameUUuid)
        };

        Executable closure = () -> Inventory.fromItems(items);
        String msg = "Took the same UUID at least twice";
        assertThrows(InventoryError.class, closure, msg);
    }

    @Test void test_createInventoryFromArrayOfItemNames() {
        String[] productNames = {
            "peanuts",
            "walnuts",
            "berries",
            "coffee",
            "tofu"
        };

        Inventory inventory = Inventory.fromProductNames(productNames);
        assertEquals(productNames.length, inventory.getInventoryMap().size());
    }
}
